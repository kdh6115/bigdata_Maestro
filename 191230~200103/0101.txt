INSERT INTO goods VALUES(1, '냉장고', 2, 850000);
INSERT INTO goods VALUES(2, '세탁기', 3, 550000);
INSERT INTO goods VALUES(3, '전자레인지', 2, 350000);
INSERT INTO goods VALUES(4, 'HDTV', 3, 1500000);

# name = not null
# INSERT INTO goods(CODE, SU, DAN) VALUES(4,3,1500000); name이 없기 때문에 안돌아감
# primary key = code 기본값이 0, 중복이 되면 안됨
# INSERT INTO goods(NAME, SU, DAN) VALUES("py", 3, 1500000);

INSERT INTO goods(CODE, NAME, su) VALUES(5, '드론', 1);
UPDATE goods SET dan = 1000000 WHERE CODE = 5; # 중복없이 데이터 입력
DELETE FROM goods WHERE CODE = 5;
INSERT INTO goods VALUES(5, 'VR기기', 2, 1440000);
INSERT INTO goods VALUES(6, 'Drone', 1,890000);
INSERT INTO goods(CODE, NAME, su) VALUES(7, '고성능컴퓨터', 3);

SELECT * FROM goods;

# 이름이 냉장고이고 단가가 750000이상인 데이터 출력
SELECT * FROM goods WHERE NAME = '냉장고' and dan >= 750000;
# 단가가 750000이하인 제품 출력
SELECT * FROM goods WHERE dan <=750000;
# 단가가 500000이상이고 1200000이하인 제품 출력
SELECT * FROM goods WHERE 500000<=dan AND dan<=1200000;
# 판매 수량이 3개 이상인 제품명과 단가의 출력
SELECT NAME, dan FROM goods WHERE su >=3;

####################################################################
INSERT INTO student2 VALUES(20120001, '고길동', 'm', 27, '선박', 'seoul', '010-000-4512', 5000);
INSERT INTO student2 VALUES(20120002, '최둘리', 'm', 22, '역사', 'pusan', '010-999-9999', 4500);
INSERT INTO student2 VALUES(20120003, '도우너', 'w', 15, '역사', 'daegu', '010-555-5555', 6500);
INSERT INTO student2 VALUES(20120004, '김만덕', 'w', 15, '유아', 'mokpo', '010-555-7777', 7000);
INSERT INTO student2 VALUES(20120005, '류현진', 'm', 22, '컴퓨터공학', 'seoul', '010-122-2222', 8000);
INSERT INTO student2 VALUES(20120006, '손흥민', 'm', 22, '컴퓨터공학', 'seoul', '010-999-9999', 8000);

# 직업별로 급여의 합계를 내시요
SELECT major,SUM(money) FROM student2 GROUP BY major;
SELECT COUNT(*) FROM student2;
# 최씨로 시작하는 사람 출력
SELECT * FROM student2 WHERE NAME LIKE '최%';
# 서울이 주소이고 고씨인 사람
SELECT * FROM student2 WHERE addr LIKE 'seoul' AND NAME LIKE '고%';

SELECT COUNT(*) "전체 행수", COUNT(money) "급여 건수", MAX(money) 최대급여, MIN(money) 최소급여,
ROUND(AVG(money),2) 평균급여 FROM student2;
SELECT MAX(money) - MIN(money) AS 급여구간 FROM student2;

# money에 대하여 min-max정규화 실행하시요
# 그룹 함수(min(money))이기 떄문에 그룹값을 상수화해야 정상적으로 계산됨
# SELECT (money-MIN(money그룹함수))/(MAX(money)-MIN(money)) AS 정규화 FROM student2;
# 프로그램으로 변경( @ : 사용자 변수, @@ : 시스템변수)
SELECT MIN(money) INTO @MINVALUE FROM student2;
SELECT @MINVALUE;
SELECT max(money)-MIN(money) INTO @rangevalue FROM student2;
SELECT @rangevalue;
SELECT (money-@MINVALUE)/@rangevalue AS 정규화값 FROM student2;
SELECT * FROM student2;

#################################################################
INSERT INTO school(schoolname, address, schoolcode, studentcount) VALUES("충주여자고등학교", "충주시", "CH00000001", 300);
INSERT INTO school(schoolname, address, schoolcode, studentcount) VALUES("신성여자고등학교", "제주시", "IC00000001", 560);
INSERT INTO school(schoolname, address, schoolcode, studentcount) VALUES("종로여자고등학교", "종로구", "JR00000001", 300);
INSERT INTO school(schoolname, address, schoolcode, studentcount) VALUES("제주여자고등학교", "서울시", "SE00000001", 300);

INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("전공인", 81, 81, 81, "SE00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("전공이", 81, 81, 81, "SE00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("전공삼", 91, 100, 100, "CH00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("전공사", 100, 100, 100, "CH00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("고려인", 100, 100, 100, "CH00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("종로구", 100, 81, 71, "IC00000001");
INSERT INTO student(NAME, kor, mat, eng, schoolcode) VALUES("김만덕", 100, 81, 71, "IC00000001");

SELECT * FROM school;
SELECT * FROM student;
SELECT * FROM school WHERE schoolcode = 'CH00000001';
SELECT * FROM student WHERE NAME = '고려인';
SELECT NAME, kor, eng, mat FROM student WHERE NAME = '전공인';
SELECT NAME AS '이름', kor AS '국어', mat AS '수학', eng AS '영어' FROM student WHERE NAME = '전공이';
# 서브쿼리
SELECT NAME, kor, mat, eng FROM student WHERE schoolcode IN (SELECT schoolcode FROM school WHERE schoolcode = 'CH00000001');
SELECT NAME, kor, mat, eng FROM student WHERE NAME LIKE '전공%';
SELECT NAME, kor, mat, eng FROM student WHERE NAME LIKE '%공%';
SELECT NAME, kor, mat, eng FROM student WHERE NAME LIKE '_려_';

SELECT * FROM student WHERE kor > 90 AND mat > 90 AND eng > 90;
SELECT * FROM student WHERE kor > 90 OR mat > 90 OR eng > 90 ;
SELECT * FROM student WHERE kor > 80 AND kor <90;
SELECT * FROM student WHERE kor BETWEEN 80 AND 100;

# group by, having, order by, limit
SELECT * FROM student LIMIT 1;

SELECT * FROM student ORDER BY NAME DESC;
SELECT * FROM student ORDER BY NAME ASC;

# inner join : 두 개의 조건이 만족하는 것만 출력
SELECT sc.schoolname, sc.schoolcode, st.name, st.average FROM student st INNER JOIN school sc 
	ON st.schoolcode = sc.schoolcode;
# sc, st : 별칭
# outter join : 두 개의 테이블이 있는데 서로 없는 것도 다 나오게 하는것 left(왼쪽에 겹치지 않는 부분도 출력), right join

SELECT NAME AS '이름', kor AS '국어', mat AS '수학', eng AS '영어' 
	FROM student where NAME = '전공이';
SELECT CONCAT(NAME, '님') AS '이름', kor AS '국어', mat AS '수학', eng AS '영어' 
	FROM student WHERE NAME = '전공인';
SELECT CONCAT(NAME, '님') AS '이름', LPAD(kor, 10, '*') AS '국어', mat AS '수학', eng '영어' 
	FROM student WHERE NAME = '전공삼';
SELECT REPLACE(CONCAT(NAME, '님'), '님', '형') AS '이름', LPAD(kor, 10, '*')
	AS '국어', mat AS '수학', eng AS '영어'
	FROM student WHERE NAME = '전공삼';
SELECT SUBSTR(REPLACE(CONCAT(NAME, '님'), '님', '형'),1,2) AS '이름', LPAD(kor, 10, '*') 
	AS '국어', mat AS '수학', eng AS '영어';
	FROM student WHERE NAME = '전공인';
SELECT length(SUBSTR(REPLACE(CONCAT(NAME, '님'), '님', '형'),1,2)) AS '이름', LPAD(kor, 10, '*')
 	AS '국어', mat AS '수학', eng AS '영어'
 	FROM student WHERE NAME = '김만덕'; # 한글 3바이트라서 6이 나옴
	
SELECT * FROM student;
# 문제
-- 전공인의 국어 : 80, 영어 : 90으로 변경하고 합계와 평균 그리고 grade를 수정, 계산을 수동으로 하고 변화만 적용하시요
UPDATE student SET kor = 80, eng = 90 WHERE NAME = '전공인'; 
UPDATE student SET total = kor+eng+mat , average = ROUND(total/3,2), 
	grade = 
	(case when average >= 90 then 'A'
	when (average>= 80 AND average < 90) then 'B'
	when (average>= 70 AND average < 80) then 'C'
	when (average >= 60 and average <70) then 'D'
	ELSE 'F'
	END) WHERE NAME = '전공인';# 트리거 insert이면 insert로 update면 update로
SELECT * FROM student WHERE NAME = '전공인';

-- student 중 kor, mat점수만 출력하시요
SELECT kor, mat FROM student ;

-- student 중 average가 90이상인 사람의 name, schoolname을 출력
SELECT st.name, sc.schoolname FROM student st Right JOIN school sc 
	ON st.schoolcode = sc.schoolcode WHERE average >= 90;

SELECT st.name, sc.schoolname FROM student as st INNER JOIN school as sc on st.average >= 90
		and st.schoolcode = sc.schoolcode; 

-- student 중 eng 점수를 출력하되 그 이름을 '영어'로 하시요
SELECT eng AS '영어' FROM student;

-- 이름 가운데 자가 '공'인 사람을 모두 출력하시요
SELECT * FROM student WHERE NAME LIKE '_공_';

-- 학교 이름이 충주 여자고등학교인 사람의 name과 total을 출력하시요
SELECT st.name, st.total FROM student AS st INNER JOIN school AS sc ON sc.schoolname='충주여자고등학교' 
 AND st.schoolcode = sc.schoolcode;

-- student에서 total을 이용하여 정렬하고 상위 2사람만 출력하시요
# where, group by,having, order by, limit
SELECT * FROM student ORDER BY total DESC LIMIT 2;


# 저장프로시져 연습
CALL student_insert("제주도", 100, 100, 100, 'IC00000001', @res);
CALL student_select();
SELECT @res;

# 이름을 변경하는 프로시져 작성
CALL student_updatename("제주도", "제주민", @res);
SELECT @res;

CALL student_sum();

CALL student_updateonce();
SELECT * FROM student;

####################################
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('BBK', '바바킴', 1973, '서울', '010', '0000000', 176, '2013-05-05');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('EJW', '은지원', 1972, '경북', '011', '8888888', 174, '2014-03-03');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('JKW', '조관우', 1965, '경기', '018', '9999999', 172, '2010-10-10');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('JYP', '조용필', 1950, '경기', '011', '4444444', 166, '2009-04-04');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('KBS', '김범수', 1979, '경남', '011', '2222222', 173, '2012-04-04');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('KKH', '김경호', 1971, '전남', '019', '3333333', 177, '2007-07-07');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('LJB', '임재범', 1963, '서울', '016', '6666666', 182, '2009-09-09');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('LSG', '이승기', 1987, '서울', '011', '1111111', 182, '2008-08-08');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('SSK', '성시경', 1979, '서울', '', '', 186, '2013-12-12');
INSERT INTO user(userID, NAME, birthYear, addr, mobile1, mobile2, height, mDate) VALUE ('YJS', '윤종신', 1969, '경남', '', '', 170, '2005-05-05');
SELECT * FROM user;

INSERT INTO prod(userID, prodName, groupName, price, amount) value ('KBS', '운동화', '전자', 30, 2);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('KBS', '노트북', '전자', 1000, 1);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('JYP', '모니터', '전자', 200, 1);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('BBK', '모니터', '전자', 200, 5);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('KBS', '청바지', '의류', 50, 3);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('BBK', '메모리', '전자', 80, 10);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('SSK', '책', '서적', 15, 5);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('EJW', '책', '서적', 15, 2);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('EJW', '청바지', '의류', 50, 1);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('BBK', '운동화', '전자', 30, 2);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('EJW', '책', '서적', 15, 1);
INSERT INTO prod(userID, prodName, groupName, price, amount) value ('BBK', '운동화', '서적', 30, 2);
SELECT * FROM prod;

-- BBK가 구매한 데이터를 출력하시요
SELECT * FROM prod WHERE userID = 'BBK';

-- 김씨인 사람 중 이름과 키를 기준으로 이름, 키 주소를 내림차순으로 출력하시요(이름 뒤에는 '님'을 붙여서 출력)
SELECT CONCAT(NAME, '님'), height, addr FROM user WHERE NAME LIKE '김%%' ORDER BY NAME DESC, height desc;

-- user를 출생년도별 오름차순으로 이름, 주소, 키, 출생년도를 출력하시요(이름은 성을 빼고 출력)
SELECT substr(NAME,2,3), addr, height, mDate FROM user ORDER BY mDate ASC;

-- 모바일 번호가 011로 시작하는 사람이 몇명인지 출력하시요
SELECT COUNT(*) FROM user WHERE mobile1 = '011';

-- 출생년도가 1960년에서 1979년까지 태어난 사람들이 구매한 품목을 출력하시요
SELECT us.name, pr.prodName FROM prod AS pr INNER JOIN user AS us ON us.birthYear >= 1960 AND birthYear <= 1979
AND us.userID = pr.userID

-- UserID별로 구매한 price, amount합계를 출력하시요(이때 userID는 name으로 출력하시요)
SELECT userID AS NAME, SUM(price) AS tot_price, SUM(amount) AS tot_amount FROM prod GROUP BY userID

-- 주소가 서울인 사람이 구매한 총액을 구하시요
SELECT SUM(pr.price) FROM prod AS pr INNER JOIN user AS us ON us.addr = '서울' AND us.userID = Pr.userID

-- 품목별 판매 총액을 출력하시요
SELECT prodName ,SUM(price) AS p_price FROM prod GROUP BY prodName;
SELECT groupName ,SUM(price) AS g_price FROM prod GROUP BY groupName;

-- 출생년도가 1970년도 이상인 사람을 대상으로 구매한 갯수가 2개 이상인 것의 판매 총합계를 구하시요
SELECT SUM(pr.price*pr.amount) AS y_price FROM prod AS pr INNER JOIN user AS us ON us.birthYear >=1970 and pr.amount>=2 AND pr.userID = us.userID

-- 모든 유저를 출력하시요(이름 중에 김씨와 조씨는 모두 컬씨로 바꾸어 출력)
SELECT(case when name LIKE '김%' or NAME LIKE '조%' then CONCAT('컬', SUBSTR(NAME, 2)) ELSE NAME END) FROM user;

-- 책을 구매한 사람의 이름과 출생년도와 주소를 출력하시요
SELECT us.name, us.addr, us.birthYear FROM user AS us inner join prod AS pr ON pr.prodName = '책' AND us.userID = pr.userID
